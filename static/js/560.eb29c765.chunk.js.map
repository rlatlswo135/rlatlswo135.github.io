{"version":3,"file":"static/js/560.eb29c765.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/Table.js","Component/Cart.jsx"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-striped`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n\n  const table = /*#__PURE__*/_jsx(\"table\", { ...props,\n    className: classes,\n    ref: ref\n  });\n\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n\n  return table;\n});\nexport default Table;","import React,{useState} from 'react';\nimport {Table} from 'react-bootstrap'\nimport { connect , useDispatch, useSelector} from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport  '../Css/App.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrashCan,faPlus,faMinus } from '@fortawesome/free-solid-svg-icons'\n\n\nconst Cart = (props) => {\n    let history = useHistory();\n    console.log('props => cartItem')\n    //받아온 인자안에 아까 product(맨밑)이라는 key로 store데이터가 들어온 모오습\n    let cartItem = props.cartItem['cartItem']\n    let finalPrice = props.cartItem['finalPrice']\n    let product = props.product\n    \n    /*\n    -------> useSelector useDispatch <-------\n    let useSelector = useSelector((store) => store);\n    console.log(useSelector.reducer1 , reducer2)\n\n    reducer함수로 만든 store들이 나옴 인자로 콜백함수를 받는데 그 콜백함수의 인자에 만든 store들이 모여있다\n    \n    let disPatach = useDispatch() //마찬가지로 disPatch가 담겨있다\n\n    장점? => 밑에서 따로 connect를 이용해서 store를 props화 할필요도없고, 그러니 참조할때 props.dispatch등 이럴필요도없이\n    변수에 저장해놧으니 useSelector.name 등 간편하게 참조를할수있을거다\n    */\n    function editPrice(price){\n        let array = String(price).split('').reverse()\n        let result = [];\n        let count = array.length%3 !==0 ? Math.trunc((array.length/3)+1) : array.length/3\n    \n        for(let i=1; i<=count; i++){\n                result.push(array.splice(0,3))\n            if(i !== count){\n                result.push(',')\n            }\n        }\n    \n        return result.flat().reverse().join('')\n    }\n\n    let [closeHover, setCloseHover] = useState([])\n    function dispatch(action,index=false,payload){\n        return props.dispatch({type:action,index,payload})\n        /*\n        dispatch='보내다' 즉 내가 원하는 상태를 보내는의미인데 redux를 통해 가져온 store에 dispatch라는\n        메소드를 이용하는데 dispatch는 인자로 reducer에 보낼 action을 받아서 보내는데 => index.html확인\n        */\n    }\n    /*\n    store에따라 dispatch가 갈리는게아니라 container안에 store가 여러개 담기고\n    그 container에 dispatch함수가 걸리는듯 즉 store가 2개라고 각각의dispatch가 있는게 아니라는뜻.\n    그러니, 밑에 dispatch2함수는 동작이안되는거다 이미 위에 dispatch함수에서 store.dispatch를 정의해놧기때문에\n    */\n\n    function dispatch2(action){ //의미없는함수\n        return props.dispatch({alert:action})\n    }\n\n    return (\n        <div className=\"mt-5\">\n            <Table responsive=\"sm\">\n                {/* 짜여진 뼈대를 보고 thead tbody tr th가 뭘의미하는지 파악해보자 */}\n                <thead>\n                <tr>\n                    <th>No.</th>\n                    <th>상품명</th>\n                    <th>수량 (재고)</th>\n                    <th>가격</th>\n                    <th>수량변경</th>\n                </tr>\n                </thead>\n                {cartItem.length !== 0 ?\n                cartItem.map((item,index) => {\n                    let PRICE = item.price\n                    let NUM = Number(PRICE.split(',').join(''))*item.quan\n                    let EDITPRICE = editPrice(NUM)\n                    let total_price = EDITPRICE+`₩`\n                    // 이부분 마무리 밑에 총액뜨게. => state를 하나더만들어서 토탈관리를해야하나?\n                    // state = cartItem store에 담겨있는애들 price의 총액\n                    let obj = {category:item.category,clothes:item.clothes,name:item.name}\n                    return(\n                        <tbody key={`key${index}`}>\n                            <tr>\n                                <td>{item.no}</td>\n                                <td onMouseLeave={()=>{\n                                    setCloseHover([])\n                                }} onMouseOver={()=> setCloseHover([index])}>\n                                    <span className=\"cart-item\" onClick={()=>history.push(`/detail/${obj.category}/${obj.clothes}/${item.name}`)}>{item.name}</span>\n                                    {closeHover[0] === index ? \n                                    <FontAwesomeIcon icon={faTrashCan} className=\"cart-item ms-5\" onClick={()=>{\n                                        dispatch('cartRemove',index,{...obj,quan:item.quan,stock:item.stock})\n                                    }}></FontAwesomeIcon> \n                                    : null}\n                                </td>\n                                <td>\n                                    <span>{item.quan}({item.stock})</span>\n                                    {item.stock < 0 ? <span>재고부족!</span> : null }\n                                </td>\n                                <td>\n                                    {total_price}\n                                </td>\n                                <td>\n                                    <FontAwesomeIcon onClick={()=>dispatch('+',index,obj)} className=\"cart-item\" icon={faPlus}/>\n                                    <FontAwesomeIcon onClick={item.quan !== 1 ? ()=>dispatch('-',index,obj) : null} className=\"ms-3 cart-item\" icon={faMinus}/>\n                                </td>\n                            </tr>\n                        </tbody>\n                    )\n                })\n                : <tbody>\n                    <tr>\n                        <td>{null}</td>\n                        <td>{null}</td>\n                        <td>장바구니가 비었습니다</td>\n                        <td>{null}</td>\n                        <td>{null}</td>\n                    </tr>\n                </tbody>\n                }\n            </Table>\n            <div>총 가격 : {`${editPrice(finalPrice)}₩`}</div>\n            {/* 이자리 */}\n        </div>\n    );\n};\n\nfunction reduxTest(store){\n    /*\n    redux에 있는 store데이터를 가져와서 props화 시켜주는 기능을가진 함수, 받아온 인자안에 store정보가 담겨있다\n    */\n    console.log('store')\n    console.log(store)\n    /*\n    reducer함수가 단일(1개)일때는 받아온 인자가 그 reducer함수지만\n    복수일경우에는 인자가 obj자료형으로 넘어오고 그안에 reducer들이 있기때문에\n    인자.key로 해당 reducer를 참조해서 써야한다\n    */\n\n    return {\n        // props화 해서 리턴 => 사용하는 컴포넌트쪽에선 받아온 인자에 product key에 value안에 store정보가 들어있겟지?\n        product:store.reducerImport1,\n        cartItem : store.reducerImport2\n        // 그럼 Cart 컴포넌트 안에 받는 props는 2개가있겟지?\n    }\n}\n\n//connect는 함수를 인자로받고 '함수를' 리턴한다. 그 리턴한 함수에,렌더시킬 컴포넌트를 넣어서 다시 호출하는 모오습\nexport default connect(reduxTest)(Cart)\n/* \nexport default connect((store)=>{return {product:store}})(Cart) => 같겟지?\n즉 connect함수에 들어갈 인자함수는 store를 어떤 이름으로 내보낼건지 return하는 함수인거같다 \n그리고 그 내보낸 store를 어떤 Component에 연결시킬지를 정하는 로직인듯보임\nconnect(어떤형태로 store를 props화 시킬건지 정하는 함수)(그렇게해서 내보낸 props를 받을 Component)\n*/\n\n/* --------------방법2---------------(useSelector,useDispatch사용법)*/\n\n// export default Cart; => 위처럼 connect로 store를 props화시키는 함수는 필요없음\n\n// props ?\n//     <div className=\"scssV2\">\n//         <p>지금 구매시 신규할인 20%!</p>\n//         {/* dispatch2로 하면 안먹히는데 그럼 dispatch함수는 1개여야하나? */}\n//         <button onClick={()=>dispatch(false)} className=\"mt-3\">close</button>\n//     </div>\n//     : null\n    "],"names":["React","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","_jsx","responsiveClass","children","connect","store","console","log","product","reducerImport1","cartItem","reducerImport2","history","useHistory","finalPrice","editPrice","price","array","String","split","reverse","result","count","length","Math","trunc","i","push","splice","flat","join","useState","closeHover","setCloseHover","dispatch","action","index","payload","type","map","item","PRICE","total_price","Number","quan","obj","category","clothes","name","no","onMouseLeave","onMouseOver","onClick","icon","faTrashCan","stock","faPlus","faMinus"],"sourceRoot":""}