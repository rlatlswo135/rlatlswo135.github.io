{"version":3,"file":"static/js/801.4ff36444.chunk.js","mappings":"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","sources":["../node_modules/react-transition-group/esm/CSSTransition.js","dummydata/sizeInfo.js","Component/ItemDetail.jsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/addClass';\nimport removeOneClass from 'dom-helpers/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you're using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it's\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument[0],\n          appearing = _this$resolveArgument[1];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntering = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument2[0],\n          appearing = _this$resolveArgument2[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntered = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument3[0],\n          appearing = _this$resolveArgument3[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onExit = function (maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument4[0];\n\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n\n    _this.onExiting = function (maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument5[0];\n\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n\n    _this.onExited = function (maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument6[0];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\n      : [maybeNode, maybeAppearing];\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    var _this$getClassNames = this.getClassNames('enter'),\n        doneClassName = _this$getClassNames.doneClassName;\n\n    if (type === 'appear' && phase === 'done' && doneClassName) {\n      className += \" \" + doneClassName;\n    } // This is to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      /* eslint-disable no-unused-expressions */\n      node && node.scrollTop;\n    }\n\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n\n      _addClass(node, className);\n    }\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided, which\n   * will be suffixed for each stage, e.g. `classNames=\"fade\"` applies:\n   *\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\n   *\n   * A few details to note about how these classes are applied:\n   *\n   * 1. They are _joined_ with the ones that are already defined on the child\n   *    component, so if you want to add some base styles, you can use\n   *    `className` without worrying that it will be overridden.\n   *\n   * 2. If the transition component mounts with `in={false}`, no classes are\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\n   *\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\n   *    allows you to define different behavior for when appearing is done and\n   *    when regular entering is done, using selectors like\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\n   *    an epic entrance animation when element first appears in the DOM using\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   *    simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;","let Outer = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcROuw4BuOKjixa2w48JmFo8_cej_KoQxVTXbQ&usqp=CAU'\n\nlet Top = 'https://static-01.daraz.pk/p/5c60c8317dbc363e2d7466772e4ed310.jpg'\n\nlet Bottom = 'https://zoodmall.com/cdn-cgi/image/w=500,fit=contain,f=auto/https://ae01.alicdn.com/kf/H31b56ae7721c43c58b790e2767f2a4e4V/AIRGRACIAS-Jeans-Men-Classic-Retro-Nostalgia-Straight-Denim-Jeans-Men-Plus-Size-28-38-Men-Brand.jpg'\n\nlet Shose = 'https://i.pinimg.com/originals/85/1d/98/851d98ba46261eca58c592ecb0aadd8b.png'\n\nlet sizeInfo={\n    Outer,Top,Bottom,Shose\n}\n\nexport default sizeInfo","import { useContext,memo } from 'react'\nimport { CSSTransition } from'react-transition-group'\n//css에 transition 기능을 좀더 쉽게사용하게하는 라이브러리 => 그럼원래의 사용법도 중요하게 알아둬야겟지?\nimport {Nav} from 'react-bootstrap'\nimport { useState,useEffect } from 'react'\nimport { propTypes } from 'react-bootstrap/esm/Image'\nimport { useHistory, useParams } from 'react-router-dom'\nimport styled from 'styled-components'\nimport '../Css/Detail.scss'\nimport sizeInfo from '../dummydata/sizeInfo'\nimport {stock_context} from '../App'\nimport { connect } from 'react-redux'\n// scss란 무엇일까?\n\nconst Box = styled.div`\n  padding:20px;\n`\nconst Title = styled.h4`\n  font-size:25px;\n  color:${props => props.color};\n`\n// 하나의 청사진만있으면 원하는건 이렇게 props를 뚫어서 쓸수있겟네? 더다양한기능이있을까? => 공식문서참조\n\nfunction ItemDetail(props){\n  function dispatch(type,payload){\n    props.dispatch({type,payload})\n  }\n  /*\n  Context API 전달하려는쪽에서 React.createContext()로 context를 만들고\n  제공하려는 Component를 context.Provider를 해주면 컴포넌트가 툭튀어나오고 value={state}옵션을 주면\n  해당 state를 공유하려는 컴포넌트들을 context.provider컴포넌트로 감싸게되면 모두다 그 state를 공유하게된다\n  사용하려는쪽에서 useContext(context)를 해주면 해당 state가 나온다\n   */\n    let [tab_ani_switch,set_ani_switch] = useState(false)\n    let [tab,setTab] = useState(0)\n    let [cart_switch,set_cart_switch] = useState(0)\n    let context_stock = useContext(stock_context);\n    // console.log(context_stock) // 잘받아온 모오습\n\n    let [alert_switch,set_alert_switch] = useState(true)\n    let {id,category,clothes,name} = useParams();\n\n    let clothesArray = props.product[category][clothes]\n    let [item] = clothesArray.filter(item => item['name'] === name)\n    /*\n    let obj = useParams();\n    obj.id => 내가찾는거 즉 useParams()함수는 내 parmas가담긴 obj를 return하는듯\n    */\n    let history = useHistory();\n    /*\n    filter를 쓴이유 => id를 parameter로 받아서 만약에 전체 data의 index로 detail페이지를 render한다면\n    정렬기능이나 이런걸 추가했을때 index로하면 렌더되는 페이지가 id에따라 나와야하는데 정렬로인해 배열 순서가 바뀌어서\n    결과가 다르게나올수있다 그러니. id params에 담긴 값에 매칭되는 데이터를 콕 찾아서 넣기위해서 필터썻음\n    */\n   \n    function tabClick(state){\n      // if(state[])\n    }\n    /*\n    LifeCycle-Hook? => class vs function\n\n    class hooks extends React.Component{\n      componentDidMount(){\n        해석그대로, 컴포넌트가 마운트될때 실행할것 (등장)\n      }\n      componentWillUnmount(){\n        해석그대로, 컴포넌트가 언마운트될때 실행할것 (퇴장)\n      }\n    }\n    vs \n    useEffect(()=>{ 인자로 함수를받네?\n      컴포넌트가 마운트될때(등장) + 컴포넌트가 update될때 실행됨\n      => 지금은 ItemDetail 컴포넌트 내에 썻기때문에 해당 컴포넌트가 마운트,update될때마다 콘솔이 찍히겟지?\n      console.log(111)\n      언마운트시에는 콜백함수안에 함수를 리턴하면 되는듯, 그리고 2번째인자로 state영역을 정해주지 않는다면\n      모든렌더링에서 useEffect함수가 실행될것.\n    })\n    */\n   useEffect(()=>{\n     console.log('mount')\n     /*\n     보통 타이머함수는 나중에 제거(clearTimeout)하기 편하기위해 변수에담아둔다\n      => 2초뒤에 state를 변경하는 코드인데 만약 user가 2초가안되서 페이지를 나가버리면 해당코드는 실행되면 안되는데, 쭉 실행된다\n     그래서 unmount부분에 clearTimeout을 해서 setTimeout함수의 동작을 취소시키는거지\n     ex)console.log('wake')가 2초뒤에 나오는데 2초가 안되서 페이지를 나가면 나간페이지에서 console 이 뜬다 clearTimeout하면 안뜬다.\n     */\n     let timer = setTimeout(()=>{set_alert_switch(false)},1000) //마운트시(등장)\n     return function unmout(){ clearTimeout(timer) } //언마운트시(퇴장)\n     //언마운트시 function을 리턴하는형태가 언마운트의 형태인듯 테스트한결과 일단은 둘다실행되긴함\n   },[])\n  //  useEffect(()=>{}) //중복으로 써도된다 하지만 실행순서는 알다시피 코드블럭순 => 2번째인자로 재렌더링의 조건을 넣어줄수있다\n\n  function TabContent(props){\n    /*\n    렌더링이 될때 스위치를 true로 바꿈으로써 ani실행 false->true일때.\n    useEffect를 안쓰면 경고창에 tabcontent를 렌더링하는동안 itemdetail컴포넌트를 렌더링할수 없다고나옴\n    왤까? 그냥 안전하게 useEffect를 써주자\n    */\n    useEffect(()=>{\n      props.set_ani_switch(true)\n    },[])\n\n    let src;\n    if(props.tab === 0){\n      if(category === 'Outer') src=sizeInfo.Outer\n      if(category === 'Top') src=sizeInfo.Top\n      if(category === 'Bottom') src=sizeInfo.Bottom\n      if(category === 'Shose') src=sizeInfo.Shose\n    }\n    if(props.tab === 1) src='https://www.lancome.co.kr/on/demandware.static/-/Sites-lancome-kr-Library/ko_KR/dwb7a7e888/homepage/sampling/180228_img.jpg'\n    return(\n      <div className=\"mt-5\">\n        <img src={`${src}`} width=\"60%\" height=\"60%\"></img>\n      </div>\n    )\n  }\n\n    return(\n    <div className=\"container\">\n        <Box>\n          {/* 속성에 js-code를 안쓸꺼면 그냥 string으로 해도되겟지? react짜봣자너 */}\n          {/* <Title color=\"blue\">title</Title>\n          <Title color=\"red\">title</Title>\n          <Title className=\"scss\">title</Title> */}\n          {/* state값이 바뀌니 재렌더링이 되는 모오오습 */}\n\n          {/* {alert_switch ?<>\n            <div className=\"scssV2\">Alert Content</div>\n            <div className=\"scssV3\">Extend Test</div>\n            <div className=\"scssV4\">@mixin - @include</div>\n            </>\n           : null} */}\n\n        </Box>\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <img alt=\"notImg\" src={`${item.img}`} width=\"100%\"/>\n          </div>\n          <div className=\"col-md-6 mt-4\">\n            <Title color=\"red\" className=\"pt-5\">{item.name}</Title>\n            <p>{item.content}</p>\n            <p>{item.price+'₩'}</p>\n            <p>재고 : {item.stock >= 0 ? item.stock : 0 }</p>\n            <div className=\"mt-5\">\n            <button className=\"btn ms-2 btn-secondary\" onClick={()=>{\n              // 항상 state를 다시 set할때는 사본을 만들어서 하는게 안전하고 중요.\n              dispatch('cartAdd',{item,name:item.name,category,clothes,stock:item.stock,price:item.price});\n              history.push('/cart')\n            }}>주문하기</button>\n            <button className=\"btn ms-2 btn-secondary\" onClick={()=>{\n              dispatch('cartAdd',{item,name:item.name,category,clothes,stock:item.stock,price:item.price});\n              set_cart_switch(1);\n              setTimeout(()=>set_cart_switch(0),800)\n            }}>장바구니</button>\n            <button className=\"btn ms-2 btn-secondary\" onClick={()=>{\n                history.goBack();\n                //history hook의 사용법은 react-router-dom 공식문서참조! \n            }}>back</button>\n            </div>\n            {\n              cart_switch !== 0 ?\n              <CSSTransition classNames=\"myTransition\"in={tab_ani_switch} timeout={500}>\n                <div className=\"mt-5\">추가 되었습니다</div>\n              </CSSTransition> : null}\n\n          </div>\n        </div>\n        {/* bootstraop문법 default? => 말그대로 방문시 어떤탭이눌린채로 보여줄꺼냐를 의미 */}\n        <Nav className=\"mt-5\" variant=\"tabs\" defaultActiveKey=\"link-0\">\n          <Nav.Item>\n            <Nav.Link onClick={()=>{set_ani_switch(false); setTab(0);}} eventKey=\"link-0\">상세정보</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link onClick={()=>{set_ani_switch(false); setTab(1);}} eventKey=\"link-1\">배송/환불</Nav.Link>\n          </Nav.Item>\n        </Nav>\n\n        {/*\n        CSStransition을 import해왓으면 컴포넌트를 import해온건데 효과를 주고싶은 컴포넌트를 감싸주면된다 컨텍스트마냥\n        그러고 in className's' timeout속성을 주면되는데 in은 switch같은느낌이다 true일때만 효과를 주는 그런느낌.\n         */}\n        <CSSTransition in={tab_ani_switch} classNames=\"myTransition\" timeout={500}>\n          <TabContent tab={tab} set_ani_switch={set_ani_switch} />\n        </CSSTransition>\n      </div>\n    )\n}\n\n// export default ItemDetail\n\nexport default connect((store)=>{return {product:store.reducerImport1}})(ItemDetail)\n"],"names":["removeClass","node","classes","split","forEach","c","removeOneClass","CSSTransition","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","this","concat","appliedClasses","appear","enter","exit","onEnter","maybeNode","maybeAppearing","_this$resolveArgument","resolveArguments","appearing","removeClasses","addClass","props","onEntering","_this$resolveArgument2","type","onEntered","_this$resolveArgument3","onExit","onExiting","onExited","nodeRef","current","getClassNames","classNames","isStringClassNames","baseClassName","activeClassName","doneClassName","_inheritsLoose","_proto","prototype","phase","className","scrollTop","addOneClass","_addClass","_this$appliedClasses$","base","active","done","render","_this$props","_objectWithoutPropertiesLoose","React","Transition","_extends","defaultProps","propTypes","Outer","Top","Bottom","Shose","Box","styled","Title","color","connect","store","product","reducerImport1","dispatch","payload","useState","tab_ani_switch","set_ani_switch","tab","setTab","cart_switch","set_cart_switch","useContext","stock_context","set_alert_switch","useParams","category","id","clothes","name","filter","item","history","useHistory","TabContent","src","useEffect","sizeInfo","width","height","console","log","timer","setTimeout","clearTimeout","alt","img","content","price","stock","onClick","push","goBack","in","timeout","Nav","variant","defaultActiveKey","eventKey"],"sourceRoot":""}